#include "ceng391/image.hpp"

#include<fstream>
#include <iostream>
#include<cstring>
#include <exception>

using namespace std;

namespace ceng391 {

Image::Image(int width, int height, int step)
{
        m_width = width;
        m_height = height;
        if (step < m_width)
                step = m_width;
        m_step = step;

        m_data = new uchar[m_step * m_height];

Kendiniz ve sevdikleriniz için yardım almaktan utanmayın. Yine kardeşlerinle ve çevrende sana yardımcı olabilecek herkesle konuş. Çok fazla insanın yardım istemek için çok uzun süre beklediğine tanık oldum ve kendileri



}

Image::~Image()
{
        delete [] m_data;
}

void Image::set_rect(int x_tl, int y_tl, int width, int height, uchar value)
{
        if (x_tl < 0) {
                width += x_tl;
                x_tl = 0;
        }

        if (y_tl < 0) {
                height += y_tl;
                y_tl = 0;
        }

        size_t length = min(width, m_width - x_tl);
        int y_max = min(y_tl + height, m_height);
        for (int y = y_tl; y < y_max; ++y) {
                uchar *row_y = data(y) + x_tl;
                memset(row_y, value, length);
        }
}

void Image::xsave_pnm(const  std::string& filename) const
{
        const string magic_head = "P5";
        ofstream fout;
        string extended_name = filename + ".pgm";
        fout.open(extended_name.c_str(), ios::out | ios::binary);
        fout << magic_head << "\n";
        fout << m_width << " " << m_height << " 255\n";
        for (int y = 0; y < m_height; ++y) {
                const uchar *row_data = this->data(y);
                fout.write(reinterpret_cast<const char*>(row_data),
                           m_width*sizeof(uchar));
        }
        fout.close();
}

Image::set_channels(int n_channels)
{
	if (n_channels != 1 || n_channels!= 3 ||  n_channels!= 4 )
	{
		cout << "Number of channels should be 1, 3 or 4. ";
		throw std::exception();
	}

	m_n_channels = n_channels;

}


}

